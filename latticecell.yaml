heat_template_version: 2013-05-23

description: >
  This is a nested stack that defines a single swarm node,
  based on a vanilla Fedora 20 cloud image.  This stack is included by
  a ResourceGroup resource in the parent template (swarm.yaml).

parameters:

  server_image:
    type: string
    default: fedora-atomic
    description: glance image used to boot the server

  server_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: lars

  external_network_id:
    type: string
    description: uuid of a network to use for floating ip addresses

  fixed_network_id:
    type: string
    description: Network from which to allocate fixed addresses.

  fixed_subnet_id:
    type: string
    description: Subnet from which to allocate fixed addresses.

  coordinator_ip:
    type: string
    description: The IP of Coordinator.

  lattice_tar_url:
    type: string
    description: The release of Lattice project

  index:
    type: string
    description: The cell index.


resources:

  node_wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"

  node_wait_condition:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on:
      - lattice_cell
    properties:
      Handle:
        get_resource: node_wait_handle
      Timeout: 6000

  ######################################################################
  #
  # security groups.  we need to permit network traffic of various
  # sorts.
  #

  secgroup_cell:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535 # Will fix later. Because we need to make sure the port is okay for all apps 
        - protocol: udp

  ######################################################################
  #
  # software configs.  these are components that are combined into
  # a multipart MIME user-data archive.
  
  write_heat_params:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/write-heat-params.yaml}
          params:
            "$WAIT_HANDLE": {get_resource: node_wait_handle}

  write_lattice_cell_env:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/write-lattice-cell-env.yaml}
          params:
            "$COORDINATOR_IP": {get_param: coordinator_ip}
            "$ID": {get_param: index}
            "$CELL_IP": {get_attr: [lattice_cell_eth0, fixed_ips, 0, ip_address]}

  install_cell:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/install_cell.sh}
          params:
            "$LATTICE_TAR_URL": {get_param: lattice_tar_url}

  cfn_signal:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/cfn-signal.sh}

  lattice_cell_init:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: {get_resource: write_heat_params}
        - config: {get_resource: write_lattice_cell_env}
        - config: {get_resource: install_cell}
        - config: {get_resource: cfn_signal}

  lattice_cell:
    type: "OS::Nova::Server"
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data: {get_resource: lattice_cell_init}
      networks:
        - port:
            get_resource: lattice_cell_eth0

  lattice_cell_eth0:
    type: "OS::Neutron::Port"
    properties:
      network_id:
        get_param: fixed_network_id
      security_groups:
        - get_resource: secgroup_cell
      fixed_ips:
        - subnet_id:
            get_param: fixed_subnet_id

outputs:

  lattice_cell_ip:
    value: {get_attr: [lattice_cell_eth0, fixed_ips, 0, ip_address]}
