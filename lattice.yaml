heat_template_version: 2013-05-23

description: >
  This template will boot a Lattice cluster. A Lattice cluster is made up
  of a single coordinator node, and N cell nodes. 

parameters:

  #
  # REQUIRED PARAMETERS
  #
  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server

  external_network_id:
    type: string
    description: uuid of a network to use for floating ip addresses

  lattice_tar_url:
    type: string
    description: The release of Lattice project

  
  #
  # OPTIONAL PARAMETERS
  #
  server_image:
    type: string
    default: ubuntu-14.04
    description: glance image used to boot the server

  system_domain:
    type: string
    default: xip.io
    description: The system domain of Lattice

  server_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  dns_nameserver:
    type: string
    description: address of a dns nameserver reachable in your environment
    default: 8.8.8.8

  number_of_nodes:
    type: string
    description: how many swarm nodes to spawn
    default: 3

  fixed_network_cidr:
    type: string
    description: network range for fixed ip network
    default: "10.0.0.0/24"

resources:

  coordinator_wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"

  coordinator_wait_condition:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on:
      - lattice_coordinator_server
    properties:
      Handle:
        get_resource: coordinator_wait_handle
      Timeout: 6000

  ######################################################################
  #
  # network resources.  allocate a network and router for our server.
  # it would also be possible to take advantage of existing network
  # resources (and have the deployer provide network and subnet ids,
  # etc, as parameters), but I wanted to minmize the amount of
  # configuration necessary to make this go.

  fixed_network:
    type: "OS::Neutron::Net"

  # This is the subnet on which we will deploy our server.
  fixed_subnet:
    type: "OS::Neutron::Subnet"
    properties:
      cidr: {get_param: fixed_network_cidr}
      network_id:
        get_resource: fixed_network
      dns_nameservers:
        - get_param: dns_nameserver

  # create a router attached to the external network provided as a
  # parameter to this stack.
  extrouter:
    type: "OS::Neutron::Router"
    properties:
      external_gateway_info:
        network:
          get_param: external_network_id

  # attached fixed_subnet to our extrouter router.
  extrouter_inside:
    type: "OS::Neutron::RouterInterface"
    properties:
      router_id:
        get_resource: extrouter
      subnet_id:
        get_resource:
          fixed_subnet

  ######################################################################
  #
  # security groups.  we need to permit network traffic of various
  # sorts.
  #

  secgroup_coordinator:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535 # Will fix later. Because we need to make sure the port is okay for all apps 
        - protocol: udp

  ######################################################################
  #
  # software configs.  these are components that are combined into
  # a multipart MIME user-data archive.
  #

  write_heat_params:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/write-heat-params.yaml}
          params:
            "$WAIT_HANDLE": {get_resource: coordinator_wait_handle}

  write_lattice_coordinator_env:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/write-lattice-coordinator-env.yaml}
          params:
            "$COORDINATOR_IP": {get_attr: [lattice_coordinator_floating, floating_ip_address]}
            "$SYSTEM_DOMAIN": {get_param: system_domain}

  install_coordinator:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/install_coordinator.sh}
          params:
            "$LATTICE_TAR_URL": {get_param: lattice_tar_url}

  cfn_signal:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/cfn-signal.sh}

  lattice_coordinator_init:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: {get_resource: write_heat_params}
        - config: {get_resource: write_lattice_coordinator_env}
        - config: {get_resource: install_coordinator}
        - config: {get_resource: cfn_signal}

  ######################################################################
  #
  # Swarm_manager is a special node running the swarm manage daemon along
  # side the swarm agent.
  #

  lattice_coordinator_server:
    type: "OS::Nova::Server"
    depends_on:
      - extrouter_inside
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data: {get_resource: lattice_coordinator_init}
      networks:
        - port:
            get_resource: lattice_coordinator_eth0

  lattice_coordinator_eth0:
    type: "OS::Neutron::Port"
    properties:
      network_id:
        get_resource: fixed_network
      security_groups:
        - get_resource: secgroup_coordinator
      fixed_ips:
        - subnet_id:
            get_resource: fixed_subnet

  lattice_coordinator_floating:
    type: "OS::Neutron::FloatingIP"
    depends_on:
      - extrouter_inside
    properties:
      floating_network_id:
        get_param: external_network_id
      port_id:
        get_resource: lattice_coordinator_eth0

  lattice_cells:
    type: "OS::Heat::ResourceGroup"
    depends_on:
      - extrouter_inside
    properties:
      count: {get_param: number_of_nodes}
      resource_def:
        type: latticecell.yaml
        properties:
          ssh_key_name: {get_param: ssh_key_name}
          server_image: {get_param: server_image}
          server_flavor: {get_param: server_flavor}
          fixed_network_id: {get_resource: fixed_network}
          fixed_subnet_id: {get_resource: fixed_subnet}
          external_network_id: {get_param: external_network_id}
          coordinator_ip: {get_attr: [lattice_coordinator_eth0, fixed_ips, 0, ip_address]}
          lattice_tar_url: {get_param: lattice_tar_url}
          index: "%index%"

outputs:

  lattice_coordinator:
    value: {get_attr: [lattice_coordinator_floating, floating_ip_address]}
